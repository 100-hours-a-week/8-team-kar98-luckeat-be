name: 🚀 deploy-prod

on:
  push:
    branches:
      - main
      - test-deploy
  workflow_dispatch:  # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: luckeat-prod
  ASG_NAME: luckeat-asg

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: 8-team-kar98-luckeat-be

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          cd 8-team-kar98-luckeat-be
          
          # Build and push backend image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }}

      - name: Deploy with zero-downtime using ASG capacity adjustment
        run: |
          echo "Starting zero-downtime deployment by adjusting ASG capacity..."
          
          # ASG의 현재 용량을 2로 증가
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --min-size 1 \
            --max-size 3 \
            --desired-capacity 2
          
          echo "Increased ASG capacity to 2"
          
          # 배포 상태 모니터링
          MAX_ATTEMPTS=20  # 10분 타임아웃 (20 * 30초)
          ATTEMPT=0
          NEW_INSTANCE_HEALTHY=false
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            # ALB 타겟 그룹의 모든 타겟 상태 확인
            TARGET_HEALTH=$(aws elbv2 describe-target-health \
              --target-group-arn ${{ secrets.PROD_ALB_TARGET_GROUP_ARN }} \
              --query 'TargetHealthDescriptions[*].[Target.Id,TargetHealth.State]' \
              --output text)
            
            echo "Current target health status:"
            echo "$TARGET_HEALTH"
            
            # healthy 상태의 인스턴스 수 확인
            HEALTHY_COUNT=$(echo "$TARGET_HEALTH" | grep "healthy" | wc -l)
            
            if [ $HEALTHY_COUNT -ge 2 ]; then
              echo "Both instances are healthy. Proceeding with deployment completion."
              NEW_INSTANCE_HEALTHY=true
              break
            elif [ $HEALTHY_COUNT -eq 0 ]; then
              echo "Warning: No healthy instances found!"
            fi
            
            echo "Waiting for instances to become healthy... (Attempt $ATTEMPT of $MAX_ATTEMPTS)"
            echo "Current healthy instance count: $HEALTHY_COUNT"
            
            ATTEMPT=$((ATTEMPT + 1))
            sleep 30
          done
          
          if [ "$NEW_INSTANCE_HEALTHY" = true ]; then
            # ASG를 원래 크기로 복구
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name $ASG_NAME \
              --min-size 1 \
              --max-size 3 \
              --desired-capacity 1
            
            echo "Deployment completed successfully!"
            echo "ASG capacity restored to 1"
            exit 0
          else
            echo "Deployment failed: Timeout waiting for instances to become healthy"
            # ASG를 원래 크기로 복구
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name $ASG_NAME \
              --min-size 1 \
              --max-size 3 \
              --desired-capacity 1
            
            echo "ASG capacity restored to 1"
            exit 1
          fi 