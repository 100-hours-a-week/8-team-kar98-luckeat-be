name: 🚀 deploy-prod

on:
  push:
    branches:
      - main
      - test-deploy
  workflow_dispatch:  # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: luckeat-prod
  ASG_NAME: luckeat-asg

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: 8-team-kar98-luckeat-be

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          cd 8-team-kar98-luckeat-be
          
          # Build and push backend image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }}

      - name: Cancel existing instance refresh
        run: |
          # 진행 중인 인스턴스 리프레시가 있다면 취소
          CURRENT_REFRESH=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $ASG_NAME \
            --query 'InstanceRefreshes[?Status==`InProgress`].InstanceRefreshId' \
            --output text)
          
          if [ ! -z "$CURRENT_REFRESH" ] && [ "$CURRENT_REFRESH" != "None" ]; then
            echo "Cancelling existing instance refresh: $CURRENT_REFRESH"
            aws autoscaling cancel-instance-refresh \
              --auto-scaling-group-name $ASG_NAME
            sleep 30  # 취소가 완료될 때까지 대기
          fi

      - name: Start instance refresh
        run: |
          echo "Starting instance refresh..."
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{
              "InstanceWarmup": 600,
              "MinHealthyPercentage": 100
            }' \
            --strategy Rolling

          # 배포 상태 모니터링
          MAX_ATTEMPTS=10  # 5분 타임아웃 (10 * 30초)
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            # ALB 타겟 그룹의 헬스체크 상태 확인
            TARGET_HEALTH=$(aws elbv2 describe-target-health \
              --target-group-arn ${{ secrets.PROD_ALB_TARGET_GROUP_ARN }} \
              --query 'TargetHealthDescriptions[*].[Target.Id,TargetHealth.State]' \
              --output text)
            
            echo "Target Health Status:"
            echo "$TARGET_HEALTH"
            
            # 하나 이상의 healthy 타겟이 있는지 확인
            HEALTHY_COUNT=$(echo "$TARGET_HEALTH" | grep "healthy" | wc -l)
            
            if [ $HEALTHY_COUNT -gt 0 ]; then
              echo "Deployment completed successfully! At least one instance is healthy."
              exit 0
            fi
            
            echo "Waiting for healthy instance... (Attempt $ATTEMPT of $MAX_ATTEMPTS)"
            ATTEMPT=$((ATTEMPT + 1))
            sleep 30
          done
          
          echo "Deployment timed out. No healthy instances found."
          exit 1 