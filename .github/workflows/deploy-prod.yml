name: 🚀 deploy

on:
  push:
    branches:
      - main
      - deploy수정
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: 8-team-kar98-luckeat-be

      - name: Set environment variables
        run: |
          echo "🛠️ Setting env vars..."
          echo "ENV_TYPE=prod" >> $GITHUB_ENV
          echo "EC2_HOST=${{ secrets.PROD_EC2_HOST }}" >> $GITHUB_ENV
          echo "APPLICATION_YML=${{ secrets.PROD_APPLICATION_YML }}" >> $GITHUB_ENV
          echo "SENTRY_ENVIRONMENT=production" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=luckeat-prod" >> $GITHUB_ENV
          echo "✅ Env vars set:"
          echo "   ENV_TYPE=$ENV_TYPE"
          echo "   EC2_HOST=$EC2_HOST"
          echo "   ECR_REPOSITORY=$ECR_REPOSITORY"

      - name: Install Docker Compose
        run: |
          echo "🛠️ Installing Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          echo "✅ Docker Compose version: $(docker-compose --version)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          echo "🛠️ Building & pushing Docker image..."
          cd 8-team-kar98-luckeat-be
          echo "   Current dir: $(pwd)"
          echo "   Listing files:"; ls -1
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }} .
          echo "✅ Built $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }}"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }}
          echo "✅ Pushed to $ECR_REGISTRY/$ECR_REPOSITORY"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🛠️ SSH into EC2 and start deployment"
            echo "👉 Pruning Docker system..."
            docker system prune -a -f
            docker volume prune -f
            echo "✅ Docker pruned"

            echo "👉 Logging in to ECR on EC2..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} \
              | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            echo "👉 Pulling backend image..."
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:backend-${{ github.sha }} \
              && echo "✅ Pulled backend image"
            echo "👉 Pulling monitoring images..."
            docker pull prom/prometheus:latest \
              && docker pull grafana/grafana:latest \
              && docker pull grafana/loki:2.6.1 \
              && docker pull grafana/promtail:latest \
              && docker pull prom/mysqld-exporter:v0.14.0
            echo "✅ All images pulled"

            echo "👉 Updating docker-compose.yml"
            sed -i "s|image: .*/${{ env.ECR_REPOSITORY }}:.*|image: ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:backend-${{ github.sha }}|g" docker-compose.yml
            echo "✅ docker-compose.yml updated:"
            grep "image:" docker-compose.yml

            echo "👉 Writing application.yml"
            cd /home/ubuntu
            mkdir -p config
            echo "${{ env.APPLICATION_YML }}" | base64 --decode > config/application.yml
            echo "✅ application.yml content:"
            sed -n '1,5p' config/application.yml

            echo "👉 Running docker_deploy.sh"
            export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            bash docker_deploy.sh
            echo "✅ docker_deploy.sh finished"
