name: 🚀 deploy-prod

on:
  push:
    branches:
      - main
      - test-deploy
  workflow_dispatch:  # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: luckeat-prod
  ASG_NAME: luckeat-asg

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: 8-team-kar98-luckeat-be

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          cd 8-team-kar98-luckeat-be
          
          # Build and push backend image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }}

      - name: Deploy with zero downtime
        run: |
          # 현재 ASG 정보 가져오기
          echo "Fetching current ASG information..."
          CURRENT_CAPACITY=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name $ASG_NAME \
            --query 'AutoScalingGroups[0].DesiredCapacity' \
            --output text)
          
          CURRENT_INSTANCE_ID=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name $ASG_NAME \
            --query 'AutoScalingGroups[0].Instances[0].InstanceId' \
            --output text)
          
          echo "Current capacity: $CURRENT_CAPACITY"
          echo "Current instance: $CURRENT_INSTANCE_ID"
          
          # ASG capacity 2로 증가
          echo "Increasing ASG capacity to 2..."
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --min-size 2 \
            --max-size 2 \
            --desired-capacity 2
          
          # 새 인스턴스가 생성되고 healthy 상태가 될 때까지 대기
          echo "Waiting for new instance to become healthy..."
          while true; do
            INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-name $ASG_NAME \
              --query 'AutoScalingGroups[0].Instances[*].[InstanceId,LifecycleState]' \
              --output text)
            
            NEW_INSTANCE_COUNT=$(echo "$INSTANCES" | grep "InService" | wc -l)
            echo "Instances in service: $NEW_INSTANCE_COUNT"
            
            if [ "$NEW_INSTANCE_COUNT" -eq 2 ]; then
              echo "Both instances are now in service"
              break
            fi
            
            sleep 30
          done
          
          # ALB 타겟 그룹에서 새 인스턴스의 상태 확인
          echo "Checking health status in target group..."
          while true; do
            HEALTHY_COUNT=$(aws elbv2 describe-target-health \
              --target-group-arn ${{ secrets.PROD_ALB_TARGET_GROUP_ARN }} \
              --query 'TargetHealthDescriptions[?TargetHealth.State==`healthy`].Target.Id' \
              --output text | wc -w)
            
            echo "Healthy instances in target group: $HEALTHY_COUNT"
            
            if [ "$HEALTHY_COUNT" -eq 2 ]; then
              echo "Both instances are healthy in target group"
              break
            fi
            
            sleep 30
          done
          
          # 이전 인스턴스 제거
          echo "Terminating old instance: $CURRENT_INSTANCE_ID"
          aws autoscaling terminate-instance-in-auto-scaling-group \
            --instance-id $CURRENT_INSTANCE_ID \
            --no-should-decrement-desired-capacity
          
          # 잠시 대기하여 인스턴스 종료 확인
          echo "Waiting for instance termination..."
          sleep 30
          
          # ASG 설정을 원래대로 복구
          echo "Restoring original ASG settings..."
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --min-size 1 \
            --max-size 3 \
            --desired-capacity 1
          
          echo "Deployment completed successfully" 