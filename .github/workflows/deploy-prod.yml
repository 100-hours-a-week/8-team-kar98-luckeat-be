name: üöÄ deploy-prod

on:
  push:
    branches:
      - main
      - deployÏàòÏ†ï
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: 8-team-kar98-luckeat-be

      # 2) ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï (Ìï≠ÏÉÅ prod)
      - name: Set environment variables
        run: |
          echo "ENV_TYPE=prod"           >> $GITHUB_ENV
          echo "EC2_HOST=${{ secrets.PROD_EC2_HOST }}" >> $GITHUB_ENV
          echo "APPLICATION_YML=${{ secrets.PROD_APPLICATION_YML }}" >> $GITHUB_ENV
          echo "SENTRY_ENVIRONMENT=production" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=luckeat-prod" >> $GITHUB_ENV

      # 3) Docker Compose ÏÑ§Ïπò (Runner)
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # 4) AWS ÏûêÍ≤©Ï¶ùÎ™Ö ÏÑ§Ï†ï (Runner)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # 5) ECR Î°úÍ∑∏Ïù∏ (Runner)
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # 6) Î∞±ÏóîÎìú Ïù¥ÎØ∏ÏßÄ ÎπåÎìú & Ìë∏Ïãú
      - name: Build and push Docker images
        env:
          ECR_REGISTRY:   ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          cd 8-team-kar98-luckeat-be
          IMAGE_TAG="backend-${GITHUB_SHA::8}"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 7) Prod EC2Ïóê SSH Î∞∞Ìè¨
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host:     ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key:      ${{ secrets.EC2_SSH_KEY }}
        env:
          AWS_REGION:        ${{ env.AWS_REGION }}
          ECR_REGISTRY:      ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY:    ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG:         backend-${{ github.sha::8 }}
          APPLICATION_YML:   ${{ env.APPLICATION_YML }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        script: |
          set -euo pipefail

          # 1) Î∂àÌïÑÏöîÌïú Docker Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨
          docker system prune -a -f
          docker volume prune -f

          # 2) ECR Î°úÍ∑∏Ïù∏ & Î∞±ÏóîÎìú Ïù¥ÎØ∏ÏßÄ Pull
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin "$ECR_REGISTRY"
          docker pull "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          # 3) docker-compose.ymlÏóê ÏÉà ÌÉúÍ∑∏ Î∞òÏòÅ
          sed -i \
            "s|image: $ECR_REGISTRY/$ECR_REPOSITORY:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" \
            /home/ubuntu/docker-compose.yml

          # 4) prod ÌôòÍ≤ΩÏö© application.yml ÏÑ§Ï†ï
          cd /home/ubuntu
          mkdir -p config
          echo "$APPLICATION_YML" | base64 --decode > config/application.yml

          # 5) Sentry ÏÑ§Ï†ï
          export SENTRY_AUTH_TOKEN="$SENTRY_AUTH_TOKEN"

          # 6) Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
          bash docker_deploy.sh
