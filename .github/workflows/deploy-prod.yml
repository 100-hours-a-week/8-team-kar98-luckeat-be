name: üöÄ deploy-prod

on:
  push:
    branches:
      - main
      - test-deploy
  workflow_dispatch:  # ÏàòÎèô Ïã§Ìñâ Í∞ÄÎä•

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: luckeat-prod
  ASG_NAME: luckeat-asg

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: 8-team-kar98-luckeat-be

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Store current ASG state
        id: store-asg
        run: |
          # ÌòÑÏû¨ ASG ÏÉÅÌÉú Ï†ÄÏû•
          echo "Storing current ASG state..."
          
          # ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Ïù∏Ïä§ÌÑ¥Ïä§Ïùò Ïù¥ÎØ∏ÏßÄ ID Ï†ÄÏû•
          CURRENT_IMAGE_ID=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name $ASG_NAME \
            --query 'AutoScalingGroups[0].Instances[0].ImageId' \
            --output text)
          echo "CURRENT_IMAGE_ID=$CURRENT_IMAGE_ID" >> $GITHUB_ENV
          
          # ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Ïù∏Ïä§ÌÑ¥Ïä§Ïùò ÏãúÏûë ÌÖúÌîåÎ¶ø Î≤ÑÏ†Ñ Ï†ÄÏû•
          CURRENT_TEMPLATE_VERSION=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name $ASG_NAME \
            --query 'AutoScalingGroups[0].Instances[0].LaunchTemplate.Version' \
            --output text)
          echo "CURRENT_TEMPLATE_VERSION=$CURRENT_TEMPLATE_VERSION" >> $GITHUB_ENV

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          cd 8-team-kar98-luckeat-be
          
          # Build and push backend image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-${{ github.sha }}

      - name: Deploy with rollback support
        id: deploy
        run: |
          echo "Starting deployment with rollback support..."
          
          # Ïù∏Ïä§ÌÑ¥Ïä§ Î¶¨ÌîÑÎ†àÏãú ÏãúÏûë
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{
              "InstanceWarmup": 300,
              "MinHealthyPercentage": 50,
              "CheckpointPercentages": [25, 50, 75, 100],
              "CheckpointDelay": 60
            }' \
            --strategy Rolling \
            --query 'InstanceRefreshId' \
            --output text)
          
          echo "Instance refresh ID: $REFRESH_ID"
          
          # Î∞∞Ìè¨ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ
          MAX_ATTEMPTS=30  # 15Î∂Ñ ÌÉÄÏûÑÏïÑÏõÉ (30 * 30Ï¥à)
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $ASG_NAME \
              --instance-refresh-ids $REFRESH_ID \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            echo "Deployment status: $STATUS (Attempt $ATTEMPT of $MAX_ATTEMPTS)"
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Deployment completed successfully!"
              
              # Î∞∞Ìè¨ ÏÑ±Í≥µ ÌõÑ desired capacityÎ•º 1Î°ú Î≥ÄÍ≤Ω
              echo "Reducing desired capacity to 1..."
              aws autoscaling update-auto-scaling-group \
                --auto-scaling-group-name $ASG_NAME \
                --min-size 1 \
                --max-size 3 \
                --desired-capacity 1
              
              echo "ASG capacity updated successfully"
              exit 0
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "Deployment failed. Initiating rollback..."
              exit 1
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            sleep 30
          done
          
          echo "Deployment timed out. Initiating rollback..."
          exit 1

      - name: Rollback on failure
        if: failure() && steps.deploy.outcome == 'failure'
        run: |
          echo "Starting rollback process..."
          
          # Ïù¥Ï†Ñ Î≤ÑÏ†ÑÏúºÎ°ú Ïù∏Ïä§ÌÑ¥Ïä§ Î¶¨ÌîÑÎ†àÏãú ÏãúÏûë
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{
              "InstanceWarmup": 300,
              "MinHealthyPercentage": 50
            }' \
            --strategy Rolling
          
          echo "Rollback initiated. Monitoring rollback status..."
          
          # Î°§Î∞± ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $ASG_NAME \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            echo "Rollback status: $STATUS"
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Rollback completed successfully"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "Rollback failed. Manual intervention required!"
              exit 1
            fi
            
            sleep 30
          done 