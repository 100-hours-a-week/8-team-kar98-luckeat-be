name: 🚀 deploy

on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:  # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      # 1️⃣ 환경 변수 설정 (브랜치별 prod/dev 구분)
      - name: Set environment variables
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENV_TYPE=prod" >> $GITHUB_ENV
            echo "EC2_HOST=${{ secrets.PROD_EC2_HOST }}" >> $GITHUB_ENV
            echo "APPLICATION_YML=${{ secrets.PROD_APPLICATION_YML }}" >> $GITHUB_ENV
            echo "SENTRY_ENVIRONMENT=production" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=luckeat-prod" >> $GITHUB_ENV
          else
            echo "ENV_TYPE=dev" >> $GITHUB_ENV
            echo "EC2_HOST=${{ secrets.DEV_EC2_HOST }}" >> $GITHUB_ENV
            echo "APPLICATION_YML=${{ secrets.DEV_APPLICATION_YML }}" >> $GITHUB_ENV
            echo "SENTRY_ENVIRONMENT=development" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=luckeat-dev" >> $GITHUB_ENV
          fi

      # 2️⃣ GitHub에서 코드 체크아웃 (전체 history 필요)
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 3️⃣ JDK 21 설정 (필요한 경우)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 4️⃣ Sentry 릴리즈 생성
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ktb-sh
          SENTRY_PROJECT: sentry-back
        with:
          environment: ${{ env.SENTRY_ENVIRONMENT }}
          version: ${{ github.sha }}
          ignore_missing: true
          ignore_empty: true

      # 5️⃣ AWS 자격증명 구성 (ECR 사용을 위해)
      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6️⃣ Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 7️⃣ Docker 이미지 빌드, 태그, 푸시 (IMAGE 환경변수에 결과 저장)
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # 8️⃣ AWS EC2 서버에 SSH 접속 후 Docker 배포 진행
      - name: Deploy to AWS EC2 via Docker
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          envs: IMAGE AWS_REGION ENV_TYPE APPLICATION_YML
          script: |
            cd /home/ubuntu
            
            # application.yml 설정
            echo "👉 $ENV_TYPE 환경 application.yml 설정"
            mkdir -p config
            echo "$APPLICATION_YML" | base64 --decode > config/application.yml
            mkdir -p logs
            
            # ECR 로그인
            echo "👉 ECR 로그인 중..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(echo $IMAGE | cut -d'/' -f1)
            
            # 도커 배포 스크립트 실행
            echo "👉 $ENV_TYPE 환경 Docker 배포 스크립트 실행 시작"
            bash docker_deploy.sh
            
            echo "✅ $ENV_TYPE 환경 Docker 배포 완료"
