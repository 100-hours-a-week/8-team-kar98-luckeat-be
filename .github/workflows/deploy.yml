name: 🚀 deploy

on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:  # 수동 실행 가능

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      # 1️⃣ 환경 변수 설정 (브랜치별 prod/dev 구분)
      - name: Set environment variables
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENV_TYPE=prod" >> $GITHUB_ENV
            echo "EC2_HOST=${{ secrets.PROD_EC2_HOST }}" >> $GITHUB_ENV
            echo "APPLICATION_YML=${{ secrets.PROD_APPLICATION_YML }}" >> $GITHUB_ENV
            echo "SENTRY_ENVIRONMENT=production" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=luckeat-prod" >> $GITHUB_ENV
          else
            echo "ENV_TYPE=dev" >> $GITHUB_ENV
            echo "EC2_HOST=${{ secrets.DEV_EC2_HOST }}" >> $GITHUB_ENV
            echo "APPLICATION_YML=${{ secrets.DEV_APPLICATION_YML }}" >> $GITHUB_ENV
            echo "SENTRY_ENVIRONMENT=development" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=luckeat-dev" >> $GITHUB_ENV
          fi

      # 2️⃣ GitHub에서 코드 체크아웃 (전체 history 필요)
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 3️⃣ JDK 21 설정 (필요한 경우)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 4️⃣ Sentry 릴리즈 생성
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ktb-sh
          SENTRY_PROJECT: sentry-back
        with:
          environment: ${{ env.SENTRY_ENVIRONMENT }}
          version: ${{ github.sha }}
          ignore_missing: true
          ignore_empty: true

      # 5️⃣ AWS 자격증명 구성 (ECR 사용을 위해)
      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6️⃣ Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 7️⃣ Docker 이미지 빌드, 태그, 푸시 (IMAGE 환경변수에 결과 저장)
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # 8️⃣ AWS EC2 서버에 SSH 접속 후 Docker 배포 진행
      - name: Clean up existing Docker resources on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            echo "👉 기존 Docker 리소스 정리 중..."
            # 기존 컨테이너 중지 및 제거
            docker stop luckeat-backend || true
            docker rm luckeat-backend || true
            
            # 사용하지 않는 이미지 삭제
            docker images -q | xargs -r docker rmi || true
            
            # 사용하지 않는 Docker 자원 정리
            docker system prune -af

      - name: Configure AWS credentials on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            echo "👉 AWS 자격증명 설정"
            mkdir -p ~/.aws
            
            # AWS 자격증명 파일 생성
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
            echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            echo "region=ap-northeast-2" >> ~/.aws/credentials
            
            # AWS 리전 설정
            echo "[default]" > ~/.aws/config
            echo "region=ap-northeast-2" >> ~/.aws/config

      - name: Configure application.yml on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          envs: ENV_TYPE APPLICATION_YML
          script: |
            echo "👉 $ENV_TYPE 환경 application.yml 설정"
            mkdir -p config
            echo "$APPLICATION_YML" | base64 --decode > config/application.yml
            mkdir -p logs

      - name: Login to ECR and pull image
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            echo "👉 ECR 로그인 및 이미지 가져오기"
            
            # ECR 로그인
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            # 이미지 가져오기
            sudo docker pull ${{ env.IMAGE }}

      - name: Deploy Docker container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          envs: IMAGE
          script: |
            echo "👉 Docker 컨테이너 배포"
            
            # 색상 설정
            GREEN="\033[0;32m"
            RED="\033[0;31m"
            NC="\033[0m"
            
            # 변수 설정
            CONTAINER_NAME="luckeat-backend"
            CONFIG_DIR="/home/ubuntu/config"
            LOG_DIR="/home/ubuntu/logs"
            PORT_HOST=8080
            PORT_CONTAINER=8080
            
            # 컨테이너 실행
            echo -e "${GREEN}컨테이너 실행: ${CONTAINER_NAME}...${NC}"
            docker run -d \
              --name ${CONTAINER_NAME} \
              -p ${PORT_HOST}:${PORT_CONTAINER} \
              -v ${CONFIG_DIR}:/app/config \
              -v ${LOG_DIR}:/app/logs \
              --restart always \
              ${IMAGE}
            
            # 컨테이너 초기화 대기
            echo -e "${GREEN}컨테이너 초기화 대기 중...${NC}"
            sleep 10
            
            # API 헬스체크
            echo -e "${GREEN}API 헬스체크 진행 중...${NC}"
            API_RESPONSE=$(curl -s http://localhost:${PORT_HOST}/api/v1/stores || true)
            if echo "${API_RESPONSE}" | grep -q "categoryName"; then
              echo -e "${GREEN}✅ API가 정상적으로 응답하고 있습니다.${NC}"
            else
              echo -e "${RED}❌ API 헬스체크 실패: 컨테이너 로그를 확인해 주세요.${NC}"
              echo -e "${GREEN}컨테이너 로그 확인: docker logs ${CONTAINER_NAME}${NC}"
              exit 1
            fi
            
            echo -e "${GREEN}🎉 백엔드 Docker 배포가 성공적으로 완료되었습니다.${NC}"
            
            echo "✅ $ENV_TYPE 환경 Docker 배포 완료"
