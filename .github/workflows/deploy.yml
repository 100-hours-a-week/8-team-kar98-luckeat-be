name: 🚀 deploy

on:
  push:
    branches:
      - develop
      - main
      - 231-bug-deploy-수정
  workflow_dispatch:  # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      # 1️⃣ 환경 변수 설정 (브랜치별 prod/dev 구분)
      - name: Set environment variables
        run: |
          echo "==== 환경 변수 설정 시작 ===="
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENV_TYPE=prod" >> $GITHUB_ENV
            echo "EC2_HOST=${{ secrets.PROD_EC2_HOST }}" >> $GITHUB_ENV
            echo "APPLICATION_YML=${{ secrets.PROD_APPLICATION_YML }}" >> $GITHUB_ENV
            echo "SENTRY_ENVIRONMENT=production" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=luckeat-prod" >> $GITHUB_ENV
            echo "환경: prod 설정 완료"
          else
            echo "ENV_TYPE=dev" >> $GITHUB_ENV
            echo "EC2_HOST=${{ secrets.DEV_EC2_HOST }}" >> $GITHUB_ENV
            echo "APPLICATION_YML=${{ secrets.DEV_APPLICATION_YML }}" >> $GITHUB_ENV
            echo "SENTRY_ENVIRONMENT=development" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=luckeat-dev" >> $GITHUB_ENV
            echo "환경: dev 설정 완료"
          fi
          echo "==== 환경 변수 설정 완료 ===="

      # 2️⃣ GitHub에서 코드 체크아웃 (전체 history 필요)
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 3️⃣ JDK 21 설정 (필요한 경우)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 4️⃣ Sentry 릴리즈 생성
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ktb-sh
          SENTRY_PROJECT: sentry-back
        with:
          environment: ${{ env.SENTRY_ENVIRONMENT }}
          version: ${{ github.sha }}
          ignore_missing: true
          ignore_empty: true

      # 5️⃣ AWS 자격증명 구성 (ECR 사용을 위해)
      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6️⃣ Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 7️⃣ Docker 이미지 빌드, 태그, 푸시
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "==== Docker 이미지 빌드 시작 ===="
          # 이미지 빌드
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg SPRING_PROFILES_ACTIVE=${{ env.ENV_TYPE }} .
          echo "Docker 이미지 빌드 완료. 이미지 태그:"
          docker images | grep $ECR_REGISTRY/$ECR_REPOSITORY
          
          # 이미지 푸시
          echo "==== 이미지 푸시 시작 ===="
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "이미지 푸시 완료."
          
          # 환경 변수 설정
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Image : $IMAGE"
          echo "ECR_REGISTRY : $ECR_REGISTRY"
          echo "ECR_REPOSITORY : $ECR_REPOSITORY"
          echo "IMAGE_TAG : $IMAGE_TAG"
          echo "==== Docker 이미지 빌드, 태그, 푸시 완료 ===="

      # 8️⃣ EC2에서 기존 Docker 리소스 정리
      - name: Clean up existing Docker resources on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            echo "==== [EC2] 기존 Docker 리소스 정리 시작 ===="
            echo "기존 컨테이너 종료 시도..."
            docker stop luckeat-backend || true && echo "컨테이너 정지 완료" || echo "컨테이너가 실행 중이지 않음"
            echo "기존 컨테이너 제거 시도..."
            docker rm luckeat-backend || true && echo "컨테이너 제거 완료" || echo "제거할 컨테이너 없음"
            
            echo "사용하지 않는 Docker 이미지 삭제..."
            docker images -q | xargs -r docker rmi || true && echo "이미지 삭제 완료"
            
            echo "Docker 시스템 정리 시작..."
            docker system prune -af && echo "Docker 시스템 정리 완료"
            echo "==== [EC2] 기존 Docker 리소스 정리 완료 ===="

      # 9️⃣ EC2에서 application.yml 구성
      - name: Configure application.yml on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          envs: ENV_TYPE APPLICATION_YML
          script: |
            echo "==== [EC2] application.yml 구성 시작 ===="
            echo "환경: $ENV_TYPE"
            mkdir -p config
            echo "$APPLICATION_YML" | base64 --decode > config/application.yml
            echo "config/application.yml 생성 완료."
            mkdir -p logs && echo "logs 디렉토리 생성 완료."
            echo "==== [EC2] application.yml 구성 완료 ===="

      # 🔟 EC2에서 ECR 로그인 및 이미지 pull
      - name: Login to ECR and pull image
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          envs: |
            IMAGE
            ENV_TYPE
            APPLICATION_YML
            AWS_REGION
            AWS_SHARED_CREDENTIALS_FILE=/dev/null
          script: |
            echo "==== [EC2] ECR 로그인 및 이미지 pull 시작 ===="
            # AWS 자격증명 파일 설정 (비대화형 환경)
            export AWS_SHARED_CREDENTIALS_FILE=/dev/null
            echo "AWS_REGION: $AWS_REGION"
            # ECR URL 추출 (IMAGE 변수에서)
            ECR_URL=$(echo $IMAGE | cut -d'/' -f1)
            echo "추출된 ECR_URL: $ECR_URL"
            # ECR 로그인
            echo "ECR 로그인 시도..."
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_URL && echo "ECR 로그인 성공" || { echo "ECR 로그인 실패"; exit 1; }
            # 이미지 pull
            echo "Docker 이미지 pull 시작..."
            sudo docker pull $IMAGE && echo "Docker 이미지 pull 완료" || { echo "이미지 pull 실패"; exit 1; }
            echo "==== [EC2] ECR 로그인 및 이미지 pull 완료 ===="

      # 1⓪ EC2에서 Docker 컨테이너 배포
      - name: Deploy Docker container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          envs: IMAGE
          script: |
            echo "==== [EC2] Docker 컨테이너 배포 시작 ===="
            # 색상 설정
            GREEN="\033[0;32m"
            RED="\033[0;31m"
            NC="\033[0m"
            # 변수 설정
            CONTAINER_NAME="luckeat-backend"
            CONFIG_DIR="/home/ubuntu/config"
            LOG_DIR="/home/ubuntu/logs"
            PORT_HOST=8080
            PORT_CONTAINER=8080
            echo -e "${GREEN}컨테이너 실행: ${CONTAINER_NAME}...${NC}"
            docker run -d \
              --name ${CONTAINER_NAME} \
              -p ${PORT_HOST}:${PORT_CONTAINER} \
              -v ${CONFIG_DIR}:/app/config \
              -v ${LOG_DIR}:/app/logs \
              --restart always \
              ${IMAGE} && echo -e "${GREEN}컨테이너 실행 성공${NC}" || { echo -e "${RED}컨테이너 실행 실패${NC}"; exit 1; }
            echo -e "${GREEN}컨테이너 초기화 대기 중...${NC}"
            sleep 10
            echo -e "${GREEN}API 헬스체크 진행 중...${NC}"
            API_RESPONSE=$(curl -s http://localhost:${PORT_HOST}/api/v1/stores || true)
            if echo "${API_RESPONSE}" | grep -q "categoryName"; then
              echo -e "${GREEN}✅ API가 정상적으로 응답하고 있습니다.${NC}"
            else
              echo -e "${RED}❌ API 헬스체크 실패: 컨테이너 로그를 확인해 주세요.${NC}"
              echo -e "${GREEN}컨테이너 로그 확인: docker logs ${CONTAINER_NAME}${NC}"
              exit 1
            fi
            echo -e "${GREEN}==== [EC2] Docker 컨테이너 배포 완료 ====${NC}"
            echo "✅ $ENV_TYPE 환경 Docker 배포 완료"
