name: 🚀 deploy

on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:  # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      # 1️⃣ 환경 변수 설정 (브랜치별 prod/dev 구분)
      - name: Set environment variables
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENV_TYPE=prod" >> $GITHUB_ENV
            echo "EC2_HOST=${{ secrets.PROD_EC2_HOST }}" >> $GITHUB_ENV
            echo "APPLICATION_YML=${{ secrets.PROD_APPLICATION_YML }}" >> $GITHUB_ENV
            echo "SENTRY_ENVIRONMENT=production" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=luckeat-prod" >> $GITHUB_ENV
          else
            echo "ENV_TYPE=dev" >> $GITHUB_ENV
            echo "EC2_HOST=${{ secrets.DEV_EC2_HOST }}" >> $GITHUB_ENV
            echo "APPLICATION_YML=${{ secrets.DEV_APPLICATION_YML }}" >> $GITHUB_ENV
            echo "SENTRY_ENVIRONMENT=development" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=luckeat-dev" >> $GITHUB_ENV
          fi

      # 2️⃣ GitHub에서 코드 체크아웃 (전체 history 필요)
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 3️⃣ AWS 자격증명 구성 (ECR 사용을 위해)
      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 4️⃣ Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 5️⃣ Docker 이미지 빌드, 태그, 푸시
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # 이미지 빌드
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg SPRING_PROFILES_ACTIVE=${{ env.ENV_TYPE }} .
          
          # 이미지 태그 확인
          docker images | grep $ECR_REGISTRY/$ECR_REPOSITORY
          
          # 이미지 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # 환경 변수 설정
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # 6️⃣ AWS EC2 서버에 SSH 접속 후 애플리케이션 설정
      - name: Configure application.yml on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          envs: ENV_TYPE APPLICATION_YML
          script: |
            echo "👉 $ENV_TYPE 환경 application.yml 설정"
            mkdir -p config
            echo "$APPLICATION_YML" | base64 --decode > config/application.yml
            mkdir -p logs

      # 7️⃣ ECR 로그인 및 이미지 가져오기
      - name: Login to ECR and pull image
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          envs: |
            IMAGE
            ENV_TYPE
            APPLICATION_YML
            AWS_REGION
            AWS_SHARED_CREDENTIALS_FILE=/dev/null
          script: |
            echo "👉 ECR 로그인 및 이미지 가져오기"
            
            # AWS 자격증명 파일 설정
            export AWS_SHARED_CREDENTIALS_FILE=/dev/null
            export AWS_REGION=${{ env.AWS_REGION }}
            
            # ECR 로그인
            aws ecr get-login-password --region ap-northeast-2  | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            # 이미지 가져오기
            sudo docker pull ${{ env.IMAGE }}

      # 8️⃣ Docker 컨테이너 배포
      - name: Deploy Docker container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          envs: IMAGE
          script: |
            echo "👉 Docker 컨테이너 배포"
            
            # 기존 컨테이너 중지 및 제거
            docker stop luckeat-backend || true
            docker rm luckeat-backend || true
            
            # 컨테이너 실행
            docker run -d \
              --name luckeat-backend \
              -p 8080:8080 \
              -v /home/ubuntu/config:/app/config \
              -v /home/ubuntu/logs:/app/logs \
              --restart always \
              ${IMAGE}
            
            # 컨테이너 초기화 대기
            sleep 10
            
            # API 헬스체크
            echo "👉 API 헬스체크 진행 중..."
            API_RESPONSE=$(curl -s http://localhost:8080/api/v1/stores || true)
            if echo "${API_RESPONSE}" | grep -q "categoryName"; then
              echo "✅ API가 정상적으로 응답하고 있습니다."
            else
              echo "❌ API 헬스체크 실패: 컨테이너 로그를 확인해 주세요."
              docker logs luckeat-backend
              exit 1
            fi
            
            echo "✅ $ENV_TYPE 환경 Docker 배포 완료"